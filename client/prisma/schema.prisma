generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
  BROKER
}

enum PropertyStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SellerPlan {
  STANDARD
  INTERMEDIATE
  ADVANCED
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  name               String?
  phone              String?
  roles              UserRole[]
  properties         Property[]
  favorites          Favorite[]
  sellerSubscription SellerSubscription?
  brokerSubscription BrokerSubscription?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  conversations      Conversation[]      @relation("ConversationParticipants")
  messages           Message[]
}

model Property {
  id              String         @id @default(uuid())
  title           String
  description     String
  type            String
  price           Float
  surface         Float
  rooms           Int?
  bathrooms       Int?
  hasGarage       Boolean        @default(false)
  floor           Int?
  address         String
  city            String
  zipCode         String
  country         String
  status          PropertyStatus @default(DRAFT)
  transactionType String?

  // New booleans
  kitchenEquipped Boolean @default(false)
  terrace         Boolean @default(false)
  balcony         Boolean @default(false)
  garden          Boolean @default(false)
  pool            Boolean @default(false)
  disabledAccess  Boolean @default(false)
  basement        Boolean @default(false)

  // Terrace / Balcony details
  terraceCount   Int?
  terraceSurface Float?
  balconyCount   Int?
  balconySurface Float?

  // Additional infos
  constructionYear Int?
  landSurface      Float?
  condition        String?

  // Energy balance
  energyConsumption      String?
  greenhouseGasEmission  String?
  finalEnergyConsumption Float?
  energyCostMin          Float?
  energyCostMax          Float?
  energyIndexDate        String?

  userId       String
  user         User            @relation(fields: [userId], references: [id])
  images       PropertyImage[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Favorite     Favorite[]
  Conversation Conversation[]
}

model PropertyImage {
  id         String   @id @default(uuid())
  propertyId String
  url        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, propertyId])
}

model SellerSubscription {
  id                   String    @id @default(uuid())
  userId               String    @unique
  stripeCustomerId     String
  stripeSubscriptionId String
  priceId              String
  plan                 String
  maxProperties        Int
  currentPeriodEnd     DateTime?
  status               String
  createdAt            DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model BrokerSubscription {
  id        String   @id @default(uuid())
  userId    String   @unique
  company   String?
  bio       String?
  website   String?
  phone     String?
  email     String?
  avatarUrl String?
  startedAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Conversation {
  id           String    @id @default(uuid())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
  propertyId   String?
  property     Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([propertyId, id])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
