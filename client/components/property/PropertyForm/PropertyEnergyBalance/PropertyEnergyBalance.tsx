"use client"
import styles from "./PropertyEnergyBalance.module.css"

type Props = {
    energyConsumption: string
    setEnergyConsumption: (v: string) => void
    greenhouseGasEmission: string
    setGreenhouseGasEmission: (v: string) => void
    finalEnergyConsumption: string
    setFinalEnergyConsumption: (v: string) => void
    energyCostMin: string
    setEnergyCostMin: (v: string) => void
    energyCostMax: string
    setEnergyCostMax: (v: string) => void
    energyIndexDate: string
    setEnergyIndexDate: (v: string) => void
}

const energyClasses = [
    { value: "A", label: "A - Logement trÃ¨s Ã©conome" },
    { value: "B", label: "B" },
    { value: "C", label: "C" },
    { value: "D", label: "D" },
    { value: "E", label: "E" },
    { value: "F", label: "F" },
    { value: "G", label: "G - Logement trÃ¨s Ã©nergivore" },
]

const emissionClasses = [
    { value: "A", label: "A - TrÃ¨s faibles Ã©missions" },
    { value: "B", label: "B" },
    { value: "C", label: "C" },
    { value: "D", label: "D" },
    { value: "E", label: "E" },
    { value: "F", label: "F" },
    { value: "G", label: "G - TrÃ¨s fortes Ã©missions" },
]

export default function PropertyEnergyBalance({
                                                  energyConsumption,
                                                  setEnergyConsumption,
                                                  greenhouseGasEmission,
                                                  setGreenhouseGasEmission,
                                                  finalEnergyConsumption,
                                                  setFinalEnergyConsumption,
                                                  energyCostMin,
                                                  setEnergyCostMin,
                                                  energyCostMax,
                                                  setEnergyCostMax,
                                                  energyIndexDate,
                                                  setEnergyIndexDate,
                                              }: Props) {
    return (
        <section className={styles.container}>
            <div className={styles.header}>
                <h2 className={styles.sectionTitle}>Bilan Ã‰nergÃ©tique (DPE)</h2>
                <p className={styles.sectionDescription}>
                    Informations sur la performance Ã©nergÃ©tique et les Ã©missions de gaz Ã  effet de serre
                </p>
            </div>

            <div className={styles.formGrid}>
                {/* Consommation en Ã©nergie primaire */}
                <div className={styles.formGroup}>
                    <div className={styles.labelContainer}>
                        <label htmlFor="energy-consumption" className={styles.label}>
                            <span className={styles.labelIcon}>âš¡</span>
                            Consommation en Ã©nergie primaire
                        </label>
                    </div>
                    <select
                        id="energy-consumption"
                        value={energyConsumption}
                        onChange={(e) => setEnergyConsumption(e.target.value)}
                        className={styles.select}
                    >
                        <option value="">SÃ©lectionnez une classe</option>
                        {energyClasses.map((option) => (
                            <option key={option.value} value={option.value}>
                                {option.label}
                            </option>
                        ))}
                    </select>
                    <div className={styles.inputHint}>
                        <span className={styles.hintIcon}>ðŸ’¡</span>
                        <span className={styles.hintText}>Classe Ã©nergÃ©tique du logement (A Ã  G)</span>
                    </div>
                </div>

                {/* Ã‰missions de gaz Ã  effet de serre */}
                <div className={styles.formGroup}>
                    <div className={styles.labelContainer}>
                        <label htmlFor="greenhouse-gas-emission" className={styles.label}>
                            <span className={styles.labelIcon}>ðŸ’¨</span>
                            Ã‰missions de gaz Ã  effet de serre
                        </label>
                    </div>
                    <select
                        id="greenhouse-gas-emission"
                        value={greenhouseGasEmission}
                        onChange={(e) => setGreenhouseGasEmission(e.target.value)}
                        className={styles.select}
                    >
                        <option value="">SÃ©lectionnez une classe</option>
                        {emissionClasses.map((option) => (
                            <option key={option.value} value={option.value}>
                                {option.label}
                            </option>
                        ))}
                    </select>
                    <div className={styles.inputHint}>
                        <span className={styles.hintIcon}>ðŸ’¡</span>
                        <span className={styles.hintText}>Classe d'Ã©missions de GES (A Ã  G)</span>
                    </div>
                </div>

                {/* Consommation en Ã©nergie finale */}
                <div className={styles.formGroup}>
                    <div className={styles.labelContainer}>
                        <label htmlFor="final-energy-consumption" className={styles.label}>
                            <span className={styles.labelIcon}>ðŸ“Š</span>
                            Consommation en Ã©nergie finale
                        </label>
                    </div>
                    <div className={styles.inputWithUnit}>
                        <input
                            id="final-energy-consumption"
                            type="number"
                            placeholder="0"
                            value={finalEnergyConsumption}
                            onChange={(e) => setFinalEnergyConsumption(e.target.value)}
                            className={styles.input}
                            min="0"
                        />
                        <span className={styles.unit}>kWh/mÂ²/an</span>
                    </div>
                    <div className={styles.inputHint}>
                        <span className={styles.hintIcon}>ðŸ’¡</span>
                        <span className={styles.hintText}>Consommation annuelle d'Ã©nergie finale</span>
                    </div>
                </div>

                {/* Estimation des coÃ»ts d'Ã©nergie */}
                <div className={styles.formGroup}>
                    <div className={styles.labelContainer}>
                        <label className={styles.label}>
                            <span className={styles.labelIcon}>ðŸ’°</span>
                            Estimation des coÃ»ts d'Ã©nergie
                        </label>
                    </div>
                    <div className={styles.costInputs}>
                        <div className={styles.inputWithUnit}>
                            <input
                                type="number"
                                placeholder="Min"
                                value={energyCostMin}
                                onChange={(e) => setEnergyCostMin(e.target.value)}
                                className={styles.input}
                                min="0"
                            />
                            <span className={styles.unit}>â‚¬</span>
                        </div>
                        <div className={styles.inputWithUnit}>
                            <input
                                type="number"
                                placeholder="Max"
                                value={energyCostMax}
                                onChange={(e) => setEnergyCostMax(e.target.value)}
                                className={styles.input}
                                min="0"
                            />
                            <span className={styles.unit}>â‚¬</span>
                        </div>
                    </div>
                    <div className={styles.inputHint}>
                        <span className={styles.hintIcon}>ðŸ’¡</span>
                        <span className={styles.hintText}>Fourchette annuelle estimÃ©e des dÃ©penses Ã©nergÃ©tiques</span>
                    </div>
                </div>

                {/* Date d'indexation */}
                <div className={styles.formGroup}>
                    <div className={styles.labelContainer}>
                        <label htmlFor="energy-index-date" className={styles.label}>
                            <span className={styles.labelIcon}>ðŸ“…</span>
                            Date d'indexation du prix des Ã©nergies
                        </label>
                    </div>
                    <input
                        id="energy-index-date"
                        type="date"
                        value={energyIndexDate}
                        onChange={(e) => setEnergyIndexDate(e.target.value)}
                        className={styles.input}
                    />
                    <div className={styles.inputHint}>
                        <span className={styles.hintIcon}>ðŸ’¡</span>
                        <span className={styles.hintText}>Date de rÃ©fÃ©rence pour les prix de l'Ã©nergie</span>
                    </div>
                </div>
            </div>
        </section>
    )
}